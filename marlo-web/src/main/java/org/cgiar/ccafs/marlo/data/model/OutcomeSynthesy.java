package org.cgiar.ccafs.marlo.data.model;
// Generated Jan 3, 2017 1:26:41 PM by Hibernate Tools 4.3.1.Final

import org.cgiar.ccafs.marlo.data.IAuditLog;

import com.google.gson.annotations.Expose;

/**
 * OutcomeSynthesis generated by hbm2java
 */
public class OutcomeSynthesy implements java.io.Serializable, IAuditLog {

  private static final long serialVersionUID = 538412976769773362L;
  @Expose
  private Long id;
  @Expose
  private IpElement ipElement;
  @Expose
  private IpIndicator ipIndicator;
  @Expose
  private IpProgram ipProgram;
  @Expose
  private int year;
  @Expose
  private Double achieved;

  @Expose
  private String synthesisAnual;


  @Expose
  private String synthesisGender;


  @Expose
  private String discrepancy;
  @Expose
  private Double achievedExpected;

  @Override
  public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }
    if (obj == null) {
      return false;
    }

    OutcomeSynthesy other = (OutcomeSynthesy) obj;
    if (ipElement == null) {
      if (other.ipElement != null) {
        return false;
      }
    } else if (!ipElement.getId().equals(other.ipElement.getId())) {
      return false;
    }
    if (ipIndicator == null) {
      if (other.ipIndicator != null) {
        return false;
      }
    } else if (!ipIndicator.getId().equals(other.ipIndicator.getId())) {
      return false;
    }
    if (ipProgram == null) {
      if (other.ipProgram != null) {
        return false;
      }
    } else if (!ipProgram.getId().equals(other.ipProgram.getId())) {
      return false;
    }
    if (year != other.year) {
      return false;
    }
    return true;
  }

  public Double getAchieved() {
    return achieved;
  }

  public Double getAchievedExpected() {
    return achievedExpected;
  }

  public String getDiscrepancy() {
    return discrepancy;
  }

  @Override
  public Long getId() {
    return id;
  }

  public IpElement getIpElement() {
    return ipElement;
  }

  public IpIndicator getIpIndicator() {
    return ipIndicator;
  }

  public IpProgram getIpProgram() {
    return ipProgram;
  }

  @Override
  public String getLogDeatil() {
    StringBuilder sb = new StringBuilder();
    sb.append("Id : ").append(this.getId());
    return sb.toString();
  }

  @Override
  public String getModificationJustification() {

    return "";
  }

  @Override
  public User getModifiedBy() {
    User u = new User();
    u.setId(new Long(3));
    return u;
  }

  public String getSynthesisAnual() {
    return synthesisAnual;
  }

  public String getSynthesisGender() {
    return synthesisGender;
  }

  public int getYear() {
    return year;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((ipElement == null) ? 0 : ipElement.hashCode());
    result = prime * result + ((ipIndicator == null) ? 0 : ipIndicator.hashCode());
    result = prime * result + ((ipProgram == null) ? 0 : ipProgram.hashCode());
    result = prime * result + year;
    return result;
  }

  @Override
  public boolean isActive() {

    return true;
  }

  public void setAchieved(Double achieved) {
    this.achieved = achieved;
  }

  public void setAchievedExpected(Double achievedExpected) {
    this.achievedExpected = achievedExpected;
  }

  public void setDiscrepancy(String discrepancy) {
    this.discrepancy = discrepancy;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public void setIpElement(IpElement ipElement) {
    this.ipElement = ipElement;
  }

  public void setIpIndicator(IpIndicator ipIndicator) {
    this.ipIndicator = ipIndicator;
  }

  public void setIpProgram(IpProgram ipProgram) {
    this.ipProgram = ipProgram;
  }

  public void setSynthesisAnual(String synthesisAnual) {
    this.synthesisAnual = synthesisAnual;
  }


  public void setSynthesisGender(String synthesisGender) {
    this.synthesisGender = synthesisGender;
  }


  public void setYear(int year) {
    this.year = year;
  }


  @Override
  public String toString() {
    return "OutcomeSynthesy [id=" + id + ", ipElement=" + ipElement + ", ipIndicator=" + ipIndicator + ", ipProgram="
      + ipProgram + ", year=" + year + ", achieved=" + achieved + ", synthesisAnual=" + synthesisAnual
      + ", synthesisGender=" + synthesisGender + ", discrepancy=" + discrepancy + ", achievedExpected="
      + achievedExpected + "]";
  }

}

