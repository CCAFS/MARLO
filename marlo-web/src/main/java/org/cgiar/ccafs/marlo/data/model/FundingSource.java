package org.cgiar.ccafs.marlo.data.model;
// Generated Oct 27, 2016 3:39:29 PM by Hibernate Tools 3.4.0.CR1


import org.cgiar.ccafs.marlo.config.APConstants;
import org.cgiar.ccafs.marlo.data.IAuditLog;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import com.google.gson.annotations.Expose;

/**
 * FundingSource generated by hbm2java
 */
public class FundingSource implements java.io.Serializable, IAuditLog {


  private static final long serialVersionUID = -3854119067580692258L;

  @Expose
  private Long id;

  @Expose
  private Crp crp;

  @Expose
  private boolean active;

  @Expose
  private User createdBy;

  @Expose
  private User modifiedBy;

  @Expose
  private Date activeSince;


  private List<FundingSourceBudget> budgets;

  private List<FundingSourceInstitution> institutions;

  private Set<FundingSourceBudget> fundingSourceBudgets = new HashSet<FundingSourceBudget>(0);

  private Set<FundingSource> fundingSources = new HashSet<FundingSource>(0);

  private Set<FundingSourceInstitution> fundingSourceInstitutions = new HashSet<FundingSourceInstitution>(0);

  /*
   * Funding Source Locations
   */
  private Set<FundingSourceLocation> fundingSourceLocations = new HashSet<FundingSourceLocation>(0);

  private Set<SectionStatus> sectionStatuses = new HashSet<SectionStatus>(0);

  private List<FundingSourceLocation> fundingRegions;

  private List<FundingSourceLocation> fundingCountry;

  private Set<ProjectBudget> projectBudgets = new HashSet<ProjectBudget>(0);

  private List<ProjectBudget> projectBudgetsList;

  private FundingSourceInfo fundingSourceInfo;

  private Set<FundingSourceInfo> fundingSourceInfos = new HashSet<FundingSourceInfo>(0);
  private Set<DeliverableFundingSource> deliverableFundingSources = new HashSet<DeliverableFundingSource>(0);


  public FundingSource() {
  }


  public FundingSource(User modifiedBy, boolean active, Date activeSince) {
    this.modifiedBy = modifiedBy;
    this.active = active;
    this.activeSince = activeSince;
  }


  @Override
  public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }
    if (obj == null) {
      return false;
    }

    FundingSource other = (FundingSource) obj;
    if (this.getId() == null) {
      if (other.getId() != null) {
        return false;
      }
    } else if (!this.getId().equals(other.getId())) {
      return false;
    }
    return true;
  }


  public Date getActiveSince() {
    return activeSince;
  }


  public List<FundingSourceBudget> getBudgets() {
    return budgets;
  }


  public String getComposedName() {
    try {
      System.out.println("<b> (FS" + this.id + ") " + this.getFundingSourceInfo().getBudgetType().getName() + "</b> - "
        + this.getFundingSourceInfo().getTitle());
      return "<b> (FS" + this.id + ") " + this.getFundingSourceInfo().getBudgetType().getName() + "</b> - "
        + this.getFundingSourceInfo().getTitle();
    } catch (Exception e) {
      return "<b> (FS" + this.id + ") </b> - " + this.getFundingSourceInfo().getTitle();
    }
  }


  public User getCreatedBy() {
    return createdBy;
  }


  public Crp getCrp() {
    return crp;
  }

  public Set<DeliverableFundingSource> getDeliverableFundingSources() {
    return deliverableFundingSources;
  }


  public List<FundingSourceLocation> getFundingCountry() {
    return fundingCountry;
  }

  public List<FundingSourceLocation> getFundingRegions() {
    return fundingRegions;
  }

  public Set<FundingSourceBudget> getFundingSourceBudgets() {
    return fundingSourceBudgets;
  }

  public FundingSourceInfo getFundingSourceInfo() {
    return fundingSourceInfo;
  }

  public FundingSourceInfo getFundingSourceInfo(Phase phase) {
    if (this.getFundingSourceInfo() != null) {
      return this.getFundingSourceInfo();
    } else {
      List<FundingSourceInfo> infos =
        fundingSourceInfos.stream().filter(c -> c.getPhase() != null && c.getPhase().getId() != null
          && c.getPhase().getId().longValue() == phase.getId().longValue()).collect(Collectors.toList());
      if (!infos.isEmpty()) {
        this.setFundingSourceInfo(infos.get(0));
        return this.getFundingSourceInfo();
      } else {
        this.setFundingSourceInfo(this.getFundingSourceInfoLast(phase));
        return this.getFundingSourceInfo();
      }
    }


  }


  public FundingSourceInfo getFundingSourceInfoLast(Phase phase) {
    if (this.getFundingSourceInfo() != null) {
      return this.getFundingSourceInfo();
    } else {
      List<FundingSourceInfo> infos = fundingSourceInfos
        .stream().filter(c -> c.getPhase() != null && c.getPhase().getId() != null
          && phase.getYear() > c.getPhase().getYear() && c.getPhase().getDescription().equals(APConstants.PLANNING))
        .collect(Collectors.toList());


      if (!infos.isEmpty()) {
        this.setFundingSourceInfo(infos.get(0));
        return this.getFundingSourceInfo();
      }
    }

    return null;

  }

  public Set<FundingSourceInfo> getFundingSourceInfos() {
    return fundingSourceInfos;
  }


  public Set<FundingSourceInstitution> getFundingSourceInstitutions() {
    return fundingSourceInstitutions;
  }

  public Set<FundingSourceLocation> getFundingSourceLocations() {
    return fundingSourceLocations;
  }

  public Set<FundingSource> getFundingSources() {
    return fundingSources;
  }


  @Override
  public Long getId() {
    return id;
  }


  public List<FundingSourceInstitution> getInstitutions() {
    return institutions;
  }


  @Override
  public String getLogDeatil() {
    StringBuilder sb = new StringBuilder();
    sb.append("Id : ").append(this.getId());
    return sb.toString();
  }


  @Override
  public String getModificationJustification() {
    return "";
  }

  @Override
  public User getModifiedBy() {
    return modifiedBy;
  }

  public Set<ProjectBudget> getProjectBudgets() {
    return projectBudgets;
  }

  public List<ProjectBudget> getProjectBudgetsList() {
    return projectBudgetsList;
  }

  public double getRemaining(int year, Phase phase) {
    double used = 0;

    double total = 0;
    for (FundingSourceBudget fundingSourceBudget : this.getFundingSourceBudgets().stream()
      .filter(c -> c.isActive() && c.getYear() != null && c.getYear().intValue() == year && c.getPhase().equals(phase))
      .collect(Collectors.toList())) {
      if (fundingSourceBudget.getBudget() != null) {
        total = total + fundingSourceBudget.getBudget().doubleValue();
      }

    }
    for (ProjectBudget projectBudget : this.getProjectBudgets().stream()
      .filter(c -> c.isActive() && c.getPhase() != null && c.getYear() == year && c.getPhase().equals(phase))
      .collect(Collectors.toList())) {
      used = used + projectBudget.getAmount().doubleValue();
    }
    return total - used;

  }

  /**
   * this budget is excluded from the calculation
   * 
   * @param year the year to review
   * @param budgetID the budget id to exclud
   * @return
   */
  public double getRemainingExcludeBudget(int year, long budgetID, Phase phase) {
    double used = 0;
    double total = 0;
    for (FundingSourceBudget fundingSourceBudget : this.getFundingSourceBudgets().stream()
      .filter(c -> c.isActive() && c.getYear() != null && c.getYear().intValue() == year && c.getPhase().equals(phase))
      .collect(Collectors.toList())) {
      if (fundingSourceBudget.getBudget() != null) {
        total = total + fundingSourceBudget.getBudget().doubleValue();
      }

    }
    for (ProjectBudget projectBudget : this.getProjectBudgets().stream().filter(c -> c.isActive() && c.getYear() == year
      && c.getPhase() != null && c.getId().longValue() != budgetID && c.getPhase().equals(phase))
      .collect(Collectors.toList())) {
      used = used + projectBudget.getAmount().doubleValue();
    }
    return total - used;

  }

  public Set<SectionStatus> getSectionStatuses() {
    return sectionStatuses;
  }


  public String getStatusName() {
    if (this.getFundingSourceInfo().getStatus() != null && this.getFundingSourceInfo().getStatus().intValue() != -1) {
      AgreementStatusEnum statusEnum = AgreementStatusEnum.getValue(this.getFundingSourceInfo().getStatus().intValue());
      if (statusEnum != null) {
        return statusEnum.getStatus();
      }
    }
    return "";
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    return result;
  }


  public boolean hasInstitution(long institutionID, long idPhase) {

    for (FundingSourceInstitution fundingSourceInstitution : fundingSourceInstitutions) {
      if (fundingSourceInstitution.getInstitution().getId().longValue() == institutionID
        && fundingSourceInstitution.getPhase().getId().longValue() == idPhase) {
        return true;
      }
    }
    return false;
  }

  @Override
  public boolean isActive() {
    return active;
  }

  public void setActive(boolean active) {
    this.active = active;
  }


  public void setActiveSince(Date activeSince) {
    this.activeSince = activeSince;
  }

  public void setBudgets(List<FundingSourceBudget> budgets) {
    this.budgets = budgets;
  }

  public void setCreatedBy(User createdBy) {
    this.createdBy = createdBy;
  }


  public void setCrp(Crp crp) {
    this.crp = crp;
  }

  public void setDeliverableFundingSources(Set<DeliverableFundingSource> deliverableFundingSources) {
    this.deliverableFundingSources = deliverableFundingSources;
  }


  public void setFundingCountry(List<FundingSourceLocation> fundingCountry) {
    this.fundingCountry = fundingCountry;
  }

  public void setFundingRegions(List<FundingSourceLocation> fundingRegions) {
    this.fundingRegions = fundingRegions;
  }


  public void setFundingSourceBudgets(Set<FundingSourceBudget> fundingSourceBudgets) {
    this.fundingSourceBudgets = fundingSourceBudgets;
  }


  public void setFundingSourceInfo(FundingSourceInfo fundingSourceInfo) {
    this.fundingSourceInfo = fundingSourceInfo;
  }


  public void setFundingSourceInfos(Set<FundingSourceInfo> fundingSourceInfos) {
    this.fundingSourceInfos = fundingSourceInfos;
  }


  public void setFundingSourceInstitutions(Set<FundingSourceInstitution> fundingSourceInstitutions) {
    this.fundingSourceInstitutions = fundingSourceInstitutions;
  }

  public void setFundingSourceLocations(Set<FundingSourceLocation> fundingSourceLocations) {
    this.fundingSourceLocations = fundingSourceLocations;
  }

  public void setFundingSources(Set<FundingSource> fundingSources) {
    this.fundingSources = fundingSources;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public void setInstitutions(List<FundingSourceInstitution> institutions) {
    this.institutions = institutions;
  }


  public void setModifiedBy(User modifiedBy) {
    this.modifiedBy = modifiedBy;
  }

  public void setProjectBudgets(Set<ProjectBudget> projectBudgets) {
    this.projectBudgets = projectBudgets;
  }

  public void setProjectBudgetsList(List<ProjectBudget> projectBudgetsList) {
    this.projectBudgetsList = projectBudgetsList;
  }

  public void setSectionStatuses(Set<SectionStatus> sectionStatuses) {
    this.sectionStatuses = sectionStatuses;
  }


}

