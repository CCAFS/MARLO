/*****************************************************************
 * This file is part of Managing Agricultural Research for Learning &
 * Outcomes Platform (MARLO).
 * MARLO is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * at your option) any later version.
 * MARLO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with MARLO. If not, see <http://www.gnu.org/licenses/>.
 *****************************************************************/
package org.cgiar.ccafs.marlo.data.model;
// Generated Jul 13, 2016 11:45:52 AM by Hibernate Tools 4.3.1.Final


import org.cgiar.ccafs.marlo.config.APConstants;
import org.cgiar.ccafs.marlo.data.IAuditLog;
import org.cgiar.ccafs.marlo.utils.CountryLocationLevel;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import com.google.gson.annotations.Expose;


/**
 * Project generated by hbm2java
 */
public class Project extends MarloAuditableEntity implements java.io.Serializable, IAuditLog {


  public static final int EMAIL_SUBJECT_IDENTIFIER = 4;


  public static final int EXCEL_IDENTIFIER_REPORT = 3;


  public static final int PDF_IDENTIFIER_REPORT = 2;


  private static final long serialVersionUID = -5737088425960023585L;


  public static final int STANDAR_IDENTIFIER = 1;


  private String flagshipValue;


  private String regionsValue;


  @Expose
  private Date createDate;


  private String customID;


  @Expose
  private CenterProject centerProject;


  private Set<ProjectInfo> projectInfos = new HashSet<ProjectInfo>(0);


  private ProjectInfo projectInfo;


  private List<CrpClusterOfActivity> crpActivities;


  private List<CrpProgram> flagships;


  private Set<Deliverable> deliverables = new HashSet<Deliverable>(0);


  private List<ProjectLocation> locations;


  private List<CountryLocationLevel> locationsData;

  private List<ProjectOutcome> outcomes;

  private List<ProjectLocation> projectRegions;

  private List<ProjectPartner> partners;

  private List<Activity> projectActivities;

  private Set<ProjectBudget> projectBudgetCofinances = new HashSet<ProjectBudget>(0);

  private Set<ProjectPhase> projectPhases = new HashSet<ProjectPhase>(0);
  private Set<ProjectBudget> projectBudgets = new HashSet<ProjectBudget>(0);

  private Set<ProjectBudgetsCluserActvity> projectBudgetsCluserActvities = new HashSet<ProjectBudgetsCluserActvity>(0);

  private Set<ProjectClusterActivity> projectClusterActivities = new HashSet<ProjectClusterActivity>(0);
  private Set<ProjectHighlight> projectHighlights = new HashSet<ProjectHighlight>(0);


  private List<ProjectHighlight> highligths;


  private ProjectComponentLesson projectComponentLesson;


  private Set<Activity> activities = new HashSet<Activity>(0);


  private List<ProjectBudget> budgets;

  private List<ProjectBudgetsCluserActvity> budgetsCluserActvities;
  private List<Activity> closedProjectActivities;

  private List<ProjectClusterActivity> clusterActivities;
  private ProjectComponentLesson projectComponentLessonPreview;


  private List<CountryFundingSources> countryFS;


  private List<CountryFundingSources> regionFS;

  private Set<ProjectComponentLesson> projectComponentLessons = new HashSet<ProjectComponentLesson>(0);


  private Set<ProjectCenterOutcome> projectCenterOutcomes = new HashSet<ProjectCenterOutcome>(0);


  private List<ProjectCenterOutcome> centerOutcomes;


  private Set<CaseStudyProject> caseStudyProjects = new HashSet<CaseStudyProject>(0);

  private List<CaseStudy> caseStudies;


  private Set<ProjectCrpContribution> projectCrpContributions = new HashSet<ProjectCrpContribution>(0);
  private List<ProjectCrpContribution> crpContributions;
  private List<Deliverable> projectDeliverables;
  private Set<ProjectFocus> projectFocuses = new HashSet<ProjectFocus>(0);
  private Set<ProjectLocationElementType> projectLocationElementTypes = new HashSet<ProjectLocationElementType>(0);
  private Set<ProjectLocation> projectLocations = new HashSet<ProjectLocation>(0);

  private Set<ProjectOutcome> projectOutcomes = new HashSet<ProjectOutcome>(0);
  private Set<ProjectLeverage> projectLeverages = new HashSet<ProjectLeverage>(0);

  private List<ProjectLeverage> leverages;


  private List<ProjectLeverage> leveragesClosed;


  private Set<ProjectPartner> projectPartners = new HashSet<ProjectPartner>(0);


  private Set<ProjectScope> projectScopes = new HashSet<ProjectScope>(0);

  private List<CrpProgram> regions;


  private Set<OtherContribution> otherContributions = new HashSet<OtherContribution>(0);

  private List<OtherContribution> otherContributionsList;

  private List<ProjectScope> scopes;
  private Set<SectionStatus> sectionStatuses = new HashSet<SectionStatus>(0);

  private Set<Submission> submissions = new HashSet<Submission>(0);
  private List<IpElement> outputs;

  private List<IpElement> mogs;


  private List<IpIndicator> indicators;


  private List<IpProjectIndicator> projectIndicators;


  private Set<IpProjectContributionOverview> ipProjectContributionOverviews =
    new HashSet<IpProjectContributionOverview>(0);


  private List<IpProjectContributionOverview> overviews;


  private Set<IpProjectContribution> ipProjectContributions = new HashSet<IpProjectContribution>(0);


  private Set<ProjectOtherContribution> projectOtherContributions = new HashSet<ProjectOtherContribution>(0);


  private List<ProjectOtherContribution> projectOtherContributionsList;


  private Set<ProjectFurtherContribution> projectFurtherContributions = new HashSet<ProjectFurtherContribution>(0);


  private Set<IpProjectIndicator> ipProjectIndicators = new HashSet<IpProjectIndicator>(0);


  private Set<ProjectFocusPrev> projectFocusPrevs = new HashSet<ProjectFocusPrev>(0);


  private Set<ProjectOutcomePandr> projectOutcomesPandr = new HashSet<ProjectOutcomePandr>(0);

  private List<ProjectOutcomePandr> outcomesPandr;


  private Set<ProjectExpectedStudy> projectExpectedStudies = new HashSet<ProjectExpectedStudy>(0);

  private List<ProjectExpectedStudy> expectedStudies;

  private Set<ExpectedStudyProject> expectedStudyProjects = new HashSet<ExpectedStudyProject>(0);

  private List<ProjectExpectedStudy> sharedExpectedStudies;

  private Set<ProjectBudgetsFlagship> projectBudgetsFlagships = new HashSet<ProjectBudgetsFlagship>(0);


  private List<ProjectBudgetsFlagship> budgetsFlagship;

  private Set<ProjectInnovation> projectInnovations = new HashSet<ProjectInnovation>(0);


  private List<ProjectInnovation> innovations;


  private Set<ProjectPolicy> projectPolicies = new HashSet<ProjectPolicy>(0);


  private List<ProjectPolicy> policies;


  private Set<ProjectInnovationShared> projectInnovationShareds = new HashSet<ProjectInnovationShared>(0);


  private double coreBudget;

  private double w3Budget;


  private double bilateralBudget;

  private double centenFundsBudget;


  private double percentageW1;


  private double percentageW3;

  private double percentageBilateral;


  private double percentageFundsBudget;


  private double totalW1;


  private double totalBilateral;


  private double totalW3;


  private double totalCenterFunds;


  private Set<GlobalUnitProject> globalUnitProjects = new HashSet<GlobalUnitProject>(0);


  private Phase currentPhase;


  private Set<ProjectLp6Contribution> projectLp6Contributions = new HashSet<ProjectLp6Contribution>(0);


  private ProjectLp6Contribution projectLp6Contribution;


  private Set<ProjectBudgetExecution> projectBudgetExecutions = new HashSet<ProjectBudgetExecution>(0);

  private List<ProjectBudgetExecution> budgetExecutions;


  // It is only for LP6 Autosave
  private List<ProjectLp6ContributionDeliverable> projectLp6ContributionDeliverables;


  public Project() {
  }


  @Override
  public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }
    if (obj == null) {
      return false;
    }

    Project other = (Project) obj;
    if (this.getId() == null) {
      if (other.getId() != null) {
        return false;
      }
    } else if (!this.getId().equals(other.getId())) {
      return false;
    }
    return true;
  }

  public Set<Activity> getActivities() {
    return activities;
  }

  public double getBilateralBudget() {
    return bilateralBudget;
  }

  public double getBilateralBudget(int year, Phase phase) {

    double total = 0;
    for (ProjectBudget projectBudget : this.getProjectBudgets().stream().filter(c -> c.isActive()
      && c.getPhase() != null && c.getPhase().equals(phase) && c.getBudgetType().getId() == 3 && c.getYear() == year)
      .collect(Collectors.toList())) {
      if (projectBudget.getAmount() != null) {
        total = total + projectBudget.getAmount();
      }
    }

    return total;
  }


  public List<ProjectBudgetExecution> getBudgetExecutions() {
    return budgetExecutions;
  }


  public List<ProjectBudget> getBudgets() {
    return budgets;
  }

  public List<ProjectBudgetsCluserActvity> getBudgetsCluserActvities() {
    return budgetsCluserActvities;
  }

  public List<ProjectBudgetsFlagship> getBudgetsFlagship() {
    return budgetsFlagship;
  }

  public List<CaseStudy> getCaseStudies() {
    return caseStudies;
  }

  public Set<CaseStudyProject> getCaseStudyProjects() {
    return caseStudyProjects;
  }


  public double getCentenFundsBudget() {
    return centenFundsBudget;
  }


  public double getCenterBudget(int year, Phase phase) {

    double total = 0;
    for (ProjectBudget projectBudget : this.getProjectBudgets().stream().filter(c -> c.isActive()
      && c.getPhase() != null && c.getPhase().equals(phase) && c.getBudgetType().getId() == 4 && c.getYear() == year)
      .collect(Collectors.toList())) {
      if (projectBudget.getAmount() != null) {
        total = total + projectBudget.getAmount();
      }
    }

    return total;
  }


  public List<ProjectCenterOutcome> getCenterOutcomes() {
    return centerOutcomes;
  }


  public CenterProject getCenterProject() {
    return centerProject;
  }


  public List<Activity> getClosedProjectActivities() {
    return closedProjectActivities;
  }


  public List<ProjectClusterActivity> getClusterActivities() {
    return clusterActivities;
  }


  public String getComposedName() {


    if (projectInfo != null) {
      return "P" + this.getId() + " - " + projectInfo.getTitle();
    } else {
      return "P" + this.getId();
    }

  }


  /**
   * get the composed name of one phase
   * 
   * @param phase the phase we want to get the title
   * @return the composed name for a project
   */
  public String getComposedName(Phase phase) {
    projectInfo = new ProjectInfo();
    ProjectInfo projectInfo = this.getProjecInfoPhase(phase);

    if (projectInfo != null) {
      return "P" + this.getId() + " - " + projectInfo.getTitle();
    } else {
      return "P" + this.getId();
    }

  }


  /**
   * This method gets all the coordinators working for this project.
   * 
   * @return a list of PartnerPerson with the information requested.
   */
  public List<ProjectPartnerPerson> getCoordinatorPersons(Phase phase) {
    List<ProjectPartnerPerson> projectCoordinators = new ArrayList<>();
    if (partners != null) {
      for (ProjectPartner partner : partners) {
        if (partner.getPartnerPersons() != null) {
          for (ProjectPartnerPerson person : partner.getPartnerPersons()) {
            if (person.getContactType().equals("PC")) {
              projectCoordinators.add(person);
            }
          }
        }

      }
    } else {
      for (ProjectPartner partner : projectPartners.stream().filter(c -> c.isActive() && c.getPhase().equals(phase))
        .collect(Collectors.toList())) {
        if (partner.getProjectPartnerPersons() != null) {
          for (ProjectPartnerPerson person : partner.getProjectPartnerPersons()) {

            if (person.getContactType().equals("PC") && person.isActive()) {
              projectCoordinators.add(person);
            }
          }
        }

      }
    }
    return projectCoordinators;
  }


  /**
   * This method gets all the coordinators working for this project.
   * 
   * @return a list of PartnerPerson with the information requested.
   */
  public List<ProjectPartnerPerson> getCoordinatorPersonsDB(Phase phase) {
    List<ProjectPartnerPerson> projectCoordinators = new ArrayList<>();

    for (ProjectPartner partner : projectPartners.stream().filter(c -> c.isActive() && c.getPhase().equals(phase))
      .collect(Collectors.toList())) {
      if (partner.getProjectPartnerPersons() != null) {
        for (ProjectPartnerPerson person : partner.getProjectPartnerPersons()) {

          if (person.getContactType().equals("PC") && person.isActive()) {
            projectCoordinators.add(person);
          }
        }
      }


    }
    return projectCoordinators;
  }

  public double getCoreBudget() {
    return coreBudget;
  }

  public double getCoreBudget(int year, Phase phase) {

    double total = 0;
    for (ProjectBudget projectBudget : this.getProjectBudgets().stream().filter(c -> c.isActive()
      && c.getBudgetType().getId() == 1 && c.getYear() == year && c.getPhase() != null && c.getPhase().equals(phase))
      .collect(Collectors.toList())) {
      if (projectBudget.getAmount() != null) {
        total = total + projectBudget.getAmount();
      }
    }

    return total;
  }

  public List<CountryFundingSources> getCountryFS() {
    return countryFS;
  }


  public Date getCreateDate() {
    return createDate;
  }


  public List<CrpClusterOfActivity> getCrpActivities() {
    return crpActivities;
  }


  public List<ProjectCrpContribution> getCrpContributions() {
    return crpContributions;
  }


  public List<Deliverable> getCurrentDeliverables(Phase phase) {
    List<Deliverable> deliverables = new ArrayList<Deliverable>();

    List<Deliverable> currentDeliverables = this.getDeliverables().stream()
      .filter(d -> d.isActive() && d.getDeliverableInfo(phase) != null && !d.getDeliverableInfo().isPrevious())
      .collect(Collectors.toList());

    if (currentDeliverables != null && !currentDeliverables.isEmpty()) {
      currentDeliverables.stream().sorted((d1, d2) -> d1.getId().compareTo((d2.getId()))).collect(Collectors.toList());
      deliverables.addAll(currentDeliverables);
    }

    return deliverables;
  }


  public Phase getCurrentPhase() {
    return currentPhase;
  }

  public String getCustomID() {
    return customID;
  }


  public Set<Deliverable> getDeliverables() {
    return deliverables;
  }


  public List<ProjectExpectedStudy> getExpectedStudies() {
    return expectedStudies;
  }

  public Set<ExpectedStudyProject> getExpectedStudyProjects() {
    return expectedStudyProjects;
  }

  public List<CrpProgram> getFlagships() {
    return flagships;
  }


  public String getFlagshipValue() {
    return flagshipValue;
  }


  public Set<GlobalUnitProject> getGlobalUnitProjects() {
    return globalUnitProjects;
  }

  public List<ProjectHighlight> getHighligths() {
    return highligths;
  }


  public List<IpIndicator> getIndicators() {
    return indicators;
  }


  public List<ProjectInnovation> getInnovations() {
    return innovations;
  }


  public Set<IpProjectContributionOverview> getIpProjectContributionOverviews() {
    return ipProjectContributionOverviews;
  }

  public Set<IpProjectContribution> getIpProjectContributions() {
    return ipProjectContributions;
  }


  public Set<IpProjectIndicator> getIpProjectIndicators() {
    return ipProjectIndicators;
  }


  public ProjectPartner getLeader() {

    if (partners != null) {
      for (ProjectPartner partner : partners) {

        if (partner.getPartnerPersons() != null) {
          for (ProjectPartnerPerson person : partner.getPartnerPersons()) {
            if (person.getContactType().equals("PL")) {
              return partner;
            }
          }
        }

      }
    } else {
      for (ProjectPartner partner : projectPartners.stream().filter(c -> c.isActive()).collect(Collectors.toList())) {
        if (partner.isActive()) {


          for (ProjectPartnerPerson person : partner.getProjectPartnerPersons()) {
            if (person.isActive()) {
              if (person.getContactType().equals("PL") && person.isActive()) {
                return partner;
              }
            }

          }
        }
      }


    }
    return null;
  }


  public ProjectPartner getLeader(Phase phase) {
    try {
      if (partners != null) {
        for (ProjectPartner partner : partners.stream().filter(c -> c.isActive()).collect(Collectors.toList())) {

          if (partner.getPartnerPersons() != null) {
            for (ProjectPartnerPerson person : partner.getPartnerPersons()) {
              if (person.getContactType().equals(APConstants.PROJECT_PARTNER_PL)) {
                return partner;
              }
            }
          }

        }
      } else {
        try {


          if (projectInfo.getPhase() == null) {
            projectInfo.setPhase(phase);
          }
        } catch (Exception r) {
        }

        final Phase actualPhase;

        if (projectInfo.getPhase() != null) {
          actualPhase = projectInfo.getPhase();
        } else {
          actualPhase = phase;
        }

        for (ProjectPartner partner : projectPartners.stream()
          .filter(c -> c.isActive() && c.getPhase().equals(actualPhase)).collect(Collectors.toList())) {
          if (partner.isActive()) {

            for (ProjectPartnerPerson person : partner.getProjectPartnerPersons()) {
              if (person.isActive()) {
                if (person.getContactType().equals(APConstants.PROJECT_PARTNER_PL) && person.isActive()) {
                  return partner;
                }
              }

            }
          }
        }


      }

    } catch (Exception e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
    return null;
  }


  /**
   * This method returns the project partner person who is leading the project.
   * 
   * @return a PartnerPerson object with the information requested. Or null if the project doesn't have a leader.
   */
  public ProjectPartnerPerson getLeaderPerson(Phase phase) {

    if (partners != null) {
      for (ProjectPartner partner : partners) {
        if (partner.getPartnerPersons() != null) {
          for (ProjectPartnerPerson person : partner.getPartnerPersons()) {

            if (person.getContactType().equals("PL")) {
              return person;

            }

          }
        }

      }
    } else {
      for (ProjectPartner partner : projectPartners.stream().filter(c -> c.isActive() && c.getPhase().equals(phase))
        .collect(Collectors.toList())) {
        for (ProjectPartnerPerson person : partner.getProjectPartnerPersons()) {
          if (person.isActive()) {
            if (person.getContactType().equals("PL")) {
              return person;
            }
          }
        }

      }

    }

    return null;
  }


  /**
   * This method returns the project partner person who is leading the project.
   * 
   * @return a PartnerPerson object with the information requested. Or null if the project doesn't have a leader.
   */
  public ProjectPartnerPerson getLeaderPersonDB(Phase phase) {


    for (ProjectPartner partner : projectPartners.stream()
      .filter(c -> c.isActive() && c.getPhase().getId().equals(phase.getId())).collect(Collectors.toList())) {
      for (ProjectPartnerPerson person : partner.getProjectPartnerPersons()) {
        if (person.isActive()) {
          if (person.getContactType().equals("PL")) {
            return person;
          }
        }
      }

    }


    return null;
  }


  public List<ProjectLeverage> getLeverages() {
    return leverages;
  }


  public List<ProjectLeverage> getLeveragesClosed() {
    return leveragesClosed;
  }

  public List<ProjectLocation> getLocations() {
    return locations;
  }

  public List<CountryLocationLevel> getLocationsData() {
    return locationsData;
  }

  @Override
  public String getLogDeatil() {
    StringBuilder sb = new StringBuilder();
    sb.append("Id : ").append(this.getId());
    return sb.toString();
  }

  public List<IpElement> getMogs() {
    return mogs;
  }


  public Set<OtherContribution> getOtherContributions() {
    return otherContributions;
  }


  public List<OtherContribution> getOtherContributionsList() {
    return otherContributionsList;
  }


  public List<ProjectOutcome> getOutcomes() {
    return outcomes;
  }


  public List<ProjectOutcomePandr> getOutcomesPandr() {
    return outcomesPandr;
  }

  public List<IpElement> getOutputs() {
    return outputs;
  }

  public List<IpProjectContributionOverview> getOverviews() {
    return overviews;
  }

  public List<ProjectPartner> getPartners() {
    return partners;
  }

  public double getPercentageBilateral() {
    return percentageBilateral;
  }

  public double getPercentageFundsBudget() {
    return percentageFundsBudget;
  }

  public double getPercentageW1() {
    return percentageW1;
  }

  public double getPercentageW3() {
    return percentageW3;
  }


  public List<ProjectPolicy> getPolicies() {
    return policies;
  }


  public List<Deliverable> getPreviousDeliverables(Phase phase) {
    List<Deliverable> deliverables = new ArrayList<Deliverable>();

    List<Deliverable> previousDeliverables = this.getDeliverables().stream()
      .filter(d -> d.isActive() && d.getDeliverableInfo(phase) != null && d.getDeliverableInfo().isPrevious())
      .collect(Collectors.toList());

    if (previousDeliverables != null && !previousDeliverables.isEmpty()) {
      deliverables.addAll(previousDeliverables);
      deliverables.stream().sorted((d1, d2) -> d1.getId().compareTo((d2.getId()))).collect(Collectors.toList());
    }

    return deliverables;
  }


  public ProjectInfo getProjecInfoPhase(Phase phase) {
    try {
      if (this.getProjectInfo() != null) {
        return this.getProjectInfo();
      } else {
        List<ProjectInfo> infos =
          projectInfos.stream().filter(c -> c != null && c.getPhase() != null && c.getPhase().getId() != null
            && c.getPhase().getId().longValue() == phase.getId()).collect(Collectors.toList());
        if (!infos.isEmpty()) {
          this.setProjectInfo(infos.get(0));
          return this.getProjectInfo();
        } else {
          return null;
        }
      }
    } catch (Exception e) {
      return null;
    }
  }


  public List<Activity> getProjectActivities() {
    return projectActivities;
  }

  public Set<ProjectBudget> getProjectBudgetCofinances() {
    return projectBudgetCofinances;
  }

  public Set<ProjectBudgetExecution> getProjectBudgetExecutions() {
    return projectBudgetExecutions;
  }

  public Set<ProjectBudget> getProjectBudgets() {
    return projectBudgets;
  }

  public Set<ProjectBudgetsCluserActvity> getProjectBudgetsCluserActvities() {
    return projectBudgetsCluserActvities;
  }


  public Set<ProjectBudgetsFlagship> getProjectBudgetsFlagships() {
    return projectBudgetsFlagships;
  }


  public Set<ProjectCenterOutcome> getProjectCenterOutcomes() {
    return projectCenterOutcomes;
  }


  public Set<ProjectClusterActivity> getProjectClusterActivities() {
    return projectClusterActivities;
  }


  public ProjectComponentLesson getProjectComponentLesson() {
    return projectComponentLesson;
  }


  public ProjectComponentLesson getProjectComponentLessonPreview() {
    return projectComponentLessonPreview;
  }

  public Set<ProjectComponentLesson> getProjectComponentLessons() {
    return projectComponentLessons;
  }


  public Set<ProjectCrpContribution> getProjectCrpContributions() {
    return projectCrpContributions;
  }


  public List<Deliverable> getProjectDeliverables() {
    return projectDeliverables;
  }


  public Set<ProjectExpectedStudy> getProjectExpectedStudies() {
    return projectExpectedStudies;
  }


  public Set<ProjectFocus> getProjectFocuses() {
    return projectFocuses;
  }

  public Set<ProjectFocusPrev> getProjectFocusPrevs() {
    return projectFocusPrevs;
  }


  public Set<ProjectFurtherContribution> getProjectFurtherContributions() {
    return projectFurtherContributions;
  }

  public Set<ProjectHighlight> getProjectHighlights() {
    return projectHighlights;
  }


  public Set<ProjectHighlight> getProjectHighligths() {
    return projectHighlights;
  }


  public List<IpProjectIndicator> getProjectIndicators() {
    return projectIndicators;
  }


  public ProjectInfo getProjectInfo() {
    return projectInfo;
  }


  public ProjectInfo getProjectInfoLast(Phase phase) {
    if (this.getProjectInfo() != null) {
      return this.getProjectInfo();
    } else {
      List<ProjectInfo> infos = projectInfos.stream()
        .filter(c -> c.getPhase() != null && c.getPhase().getId() != null && phase.getYear() > c.getPhase().getYear())
        .collect(Collectors.toList());


      if (!infos.isEmpty()) {
        this.setProjectInfo(infos.get(0));
        return this.getProjectInfo();
      }
    }

    return null;

  }


  public Set<ProjectInfo> getProjectInfos() {
    return projectInfos;
  }


  public Set<ProjectInnovation> getProjectInnovations() {
    return projectInnovations;
  }


  public Set<ProjectInnovationShared> getProjectInnovationShareds() {
    return projectInnovationShareds;
  }

  public Set<ProjectLeverage> getProjectLeverages() {
    return projectLeverages;
  }

  public Set<ProjectLocationElementType> getProjectLocationElementTypes() {
    return projectLocationElementTypes;
  }


  public Set<ProjectLocation> getProjectLocations() {
    return projectLocations;
  }


  public ProjectLp6Contribution getProjectLp6Contribution() {
    return projectLp6Contribution;
  }


  public List<ProjectLp6ContributionDeliverable> getProjectLp6ContributionDeliverables() {
    return projectLp6ContributionDeliverables;
  }


  public Set<ProjectLp6Contribution> getProjectLp6Contributions() {
    return projectLp6Contributions;
  }


  public Set<ProjectOtherContribution> getProjectOtherContributions() {
    return projectOtherContributions;
  }


  public List<ProjectOtherContribution> getProjectOtherContributionsList() {
    return projectOtherContributionsList;
  }


  public Set<ProjectOutcome> getProjectOutcomes() {
    return projectOutcomes;
  }


  public Set<ProjectOutcomePandr> getProjectOutcomesPandr() {
    return projectOutcomesPandr;
  }


  public Set<ProjectPartner> getProjectPartners() {
    return projectPartners;
  }


  public Set<ProjectPhase> getProjectPhases() {
    return projectPhases;
  }


  public Set<ProjectPolicy> getProjectPolicies() {
    return projectPolicies;
  }


  public List<ProjectLocation> getProjectRegions() {
    return projectRegions;
  }

  public Set<ProjectScope> getProjectScopes() {
    return projectScopes;
  }

  public List<CountryFundingSources> getRegionFS() {
    return regionFS;
  }

  public List<CrpProgram> getRegions() {
    return regions;
  }

  public String getRegionsValue() {
    return regionsValue;
  }


  public List<ProjectScope> getScopes() {
    return scopes;
  }

  public Set<SectionStatus> getSectionStatuses() {
    return sectionStatuses;
  }

  public List<ProjectExpectedStudy> getSharedExpectedStudies() {
    return sharedExpectedStudies;
  }

  public String getStandardIdentifier(int typeCodification) {
    StringBuilder result = new StringBuilder();

    switch (typeCodification) {
      // Standar identifier
      case Project.EMAIL_SUBJECT_IDENTIFIER:
        result.append("P" + this.getId());
        break;

      default:
        // Do nothing
        break;

    }


    return result.toString();
  }

  public Set<Submission> getSubmissions() {
    return submissions;
  }


  public double getTotalBilateral() {
    return totalBilateral;
  }


  public double getTotalCenterFunds() {
    return totalCenterFunds;
  }


  public double getTotalW1() {
    return totalW1;
  }


  public double getTotalW3() {
    return totalW3;
  }


  public double getW3Budget() {
    return w3Budget;
  }


  public double getW3Budget(int year, Phase phase) {
    double total = 0;
    for (ProjectBudget projectBudget : this.getProjectBudgets().stream().filter(c -> c.isActive()
      && c.getBudgetType().getId() == 2 && c.getYear() == year && c.getPhase() != null && c.getPhase().equals(phase))
      .collect(Collectors.toList())) {
      if (projectBudget.getAmount() != null) {
        total = total + projectBudget.getAmount();
      }
    }

    return total;
  }


  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((this.getId() == null) ? 0 : this.getId().hashCode());
    return result;
  }


  public boolean isCenterProject() {
    ProjectInfo projectInfo = this.getProjectInfo();
    if (projectInfo != null) {
      return projectInfo.getPhase().getCrp().isCenterType();
    }
    return false;
  }


  public boolean isCrpProject() {
    ProjectInfo projectInfo = this.getProjectInfo();
    if (projectInfo != null) {
      return projectInfo.getPhase().getCrp().isCrpType();
    }
    return false;
  }


  public void setActivities(Set<Activity> activities) {
    this.activities = activities;
  }

  public void setBilateralBudget(double bilateralBudget) {
    this.bilateralBudget = bilateralBudget;
  }


  public void setBudgetExecutions(List<ProjectBudgetExecution> budgetExecutions) {
    this.budgetExecutions = budgetExecutions;
  }


  public void setBudgets(List<ProjectBudget> budgets) {
    this.budgets = budgets;
  }


  public void setBudgetsCluserActvities(List<ProjectBudgetsCluserActvity> budgetsCluserActvities) {
    this.budgetsCluserActvities = budgetsCluserActvities;
  }

  public void setBudgetsFlagship(List<ProjectBudgetsFlagship> budgetsFlagship) {
    this.budgetsFlagship = budgetsFlagship;
  }


  public void setCaseStudies(List<CaseStudy> caseStudies) {
    this.caseStudies = caseStudies;
  }

  public void setCaseStudyProjects(Set<CaseStudyProject> caseStudyProjects) {
    this.caseStudyProjects = caseStudyProjects;
  }


  public void setCentenFundsBudget(double centenFundsBudget) {
    this.centenFundsBudget = centenFundsBudget;
  }


  public void setCenterOutcomes(List<ProjectCenterOutcome> centerOutcomes) {
    this.centerOutcomes = centerOutcomes;
  }


  public void setCenterProject(CenterProject centerProject) {
    this.centerProject = centerProject;
  }

  public void setClosedProjectActivities(List<Activity> closedProjectActivities) {
    this.closedProjectActivities = closedProjectActivities;
  }


  public void setClusterActivities(List<ProjectClusterActivity> clusterActivities) {
    this.clusterActivities = clusterActivities;
  }

  public void setCoreBudget(double coreBudget) {
    this.coreBudget = coreBudget;
  }


  public void setCountryFS(List<CountryFundingSources> countryFS) {
    this.countryFS = countryFS;
  }


  public void setCreateDate(Date createDate) {
    this.createDate = createDate;
  }


  public void setCrpActivities(List<CrpClusterOfActivity> crpActivities) {
    this.crpActivities = crpActivities;
  }


  public void setCrpContributions(List<ProjectCrpContribution> crpContributions) {
    this.crpContributions = crpContributions;
  }


  public void setCurrentPhase(Phase currentPhase) {
    this.currentPhase = currentPhase;
  }


  public void setCustomID(String customID) {
    this.customID = customID;
  }


  public void setDeliverables(Set<Deliverable> deliverables) {
    this.deliverables = deliverables;
  }


  public void setExpectedStudies(List<ProjectExpectedStudy> expectedStudies) {
    this.expectedStudies = expectedStudies;
  }


  public void setExpectedStudyProjects(Set<ExpectedStudyProject> expectedStudyProjects) {
    this.expectedStudyProjects = expectedStudyProjects;
  }


  public void setFlagships(List<CrpProgram> flagships) {
    this.flagships = flagships;
  }


  public void setFlagshipValue(String flagshipValue) {
    this.flagshipValue = flagshipValue;
  }


  public void setGlobalUnitProjects(Set<GlobalUnitProject> globalUnitProjects) {
    this.globalUnitProjects = globalUnitProjects;
  }


  public void setHighligths(List<ProjectHighlight> highligths) {
    this.highligths = highligths;
  }


  public void setIndicators(List<IpIndicator> indicators) {
    this.indicators = indicators;
  }

  public void setInnovations(List<ProjectInnovation> innovations) {
    this.innovations = innovations;
  }


  public void setIpProjectContributionOverviews(Set<IpProjectContributionOverview> ipProjectContributionOverviews) {
    this.ipProjectContributionOverviews = ipProjectContributionOverviews;
  }


  public void setIpProjectContributions(Set<IpProjectContribution> ipProjectContributions) {
    this.ipProjectContributions = ipProjectContributions;
  }


  public void setIpProjectIndicators(Set<IpProjectIndicator> ipProjectIndicators) {
    this.ipProjectIndicators = ipProjectIndicators;
  }


  public void setLeverages(List<ProjectLeverage> leverages) {
    this.leverages = leverages;
  }


  public void setLeveragesClosed(List<ProjectLeverage> leveragesClosed) {
    this.leveragesClosed = leveragesClosed;
  }


  public void setLocations(List<ProjectLocation> locations) {
    this.locations = locations;
  }


  public void setLocationsData(List<CountryLocationLevel> locationsData) {
    this.locationsData = locationsData;
  }


  public void setMogs(List<IpElement> mogs) {
    this.mogs = mogs;
  }


  public void setOtherContributions(Set<OtherContribution> otherContributions) {
    this.otherContributions = otherContributions;
  }

  public void setOtherContributionsList(List<OtherContribution> otherContributionsList) {
    this.otherContributionsList = otherContributionsList;
  }


  public void setOutcomes(List<ProjectOutcome> outcomes) {
    this.outcomes = outcomes;
  }

  public void setOutcomesPandr(List<ProjectOutcomePandr> outcomesPandr) {
    this.outcomesPandr = outcomesPandr;
  }

  public void setOutputs(List<IpElement> outputs) {
    this.outputs = outputs;
  }


  public void setOverviews(List<IpProjectContributionOverview> overviews) {
    this.overviews = overviews;
  }


  public void setPartners(List<ProjectPartner> partners) {
    this.partners = partners;
  }


  public void setPercentageBilateral(double percentageBilateral) {
    this.percentageBilateral = percentageBilateral;
  }

  public void setPercentageFundsBudget(double percentageFundsBudget) {
    this.percentageFundsBudget = percentageFundsBudget;
  }

  public void setPercentageW1(double percentageW1) {
    this.percentageW1 = percentageW1;
  }

  public void setPercentageW3(double percentageW3) {
    this.percentageW3 = percentageW3;
  }

  public void setPolicies(List<ProjectPolicy> policies) {
    this.policies = policies;
  }

  public void setProjectActivities(List<Activity> projectActivities) {
    this.projectActivities = projectActivities;
  }

  public void setProjectBudgetCofinances(Set<ProjectBudget> projectBudgetCofinances) {
    this.projectBudgetCofinances = projectBudgetCofinances;
  }

  public void setProjectBudgetExecutions(Set<ProjectBudgetExecution> projectBudgetExecutions) {
    this.projectBudgetExecutions = projectBudgetExecutions;
  }

  public void setProjectBudgets(Set<ProjectBudget> projectBudgets) {
    this.projectBudgets = projectBudgets;
  }

  public void setProjectBudgetsCluserActvities(Set<ProjectBudgetsCluserActvity> projectBudgetsCluserActvities) {
    this.projectBudgetsCluserActvities = projectBudgetsCluserActvities;
  }

  public void setProjectBudgetsFlagships(Set<ProjectBudgetsFlagship> projectBudgetsFlagships) {
    this.projectBudgetsFlagships = projectBudgetsFlagships;
  }

  public void setProjectCenterOutcomes(Set<ProjectCenterOutcome> projectCenterOutcomes) {
    this.projectCenterOutcomes = projectCenterOutcomes;
  }

  public void setProjectClusterActivities(Set<ProjectClusterActivity> projectClusterActivities) {
    this.projectClusterActivities = projectClusterActivities;
  }

  public void setProjectComponentLesson(ProjectComponentLesson projectComponentLesson) {
    this.projectComponentLesson = projectComponentLesson;
  }

  public void setProjectComponentLessonPreview(ProjectComponentLesson projectComponentLessonPreview) {
    this.projectComponentLessonPreview = projectComponentLessonPreview;
  }

  public void setProjectComponentLessons(Set<ProjectComponentLesson> projectComponentLessons) {
    this.projectComponentLessons = projectComponentLessons;
  }

  public void setProjectCrpContributions(Set<ProjectCrpContribution> projectCrpContributions) {
    this.projectCrpContributions = projectCrpContributions;
  }

  public void setProjectDeliverables(List<Deliverable> projectDeliverables) {
    this.projectDeliverables = projectDeliverables;
  }


  public void setProjectExpectedStudies(Set<ProjectExpectedStudy> projectExpectedStudies) {
    this.projectExpectedStudies = projectExpectedStudies;
  }

  public void setProjectFocuses(Set<ProjectFocus> projectFocuses) {
    this.projectFocuses = projectFocuses;
  }

  public void setProjectFocusPrevs(Set<ProjectFocusPrev> projectFocusPrevs) {
    this.projectFocusPrevs = projectFocusPrevs;
  }

  public void setProjectFurtherContributions(Set<ProjectFurtherContribution> projectFurtherContributions) {
    this.projectFurtherContributions = projectFurtherContributions;
  }

  public void setProjectHighlights(Set<ProjectHighlight> projectHighlights) {
    this.projectHighlights = projectHighlights;
  }

  public void setProjectIndicators(List<IpProjectIndicator> projectIndicators) {
    this.projectIndicators = projectIndicators;
  }


  public void setProjectInfo(ProjectInfo projectInfo) {
    this.projectInfo = projectInfo;
  }

  public void setProjectInfos(Set<ProjectInfo> projectInfos) {
    this.projectInfos = projectInfos;
  }

  public void setProjectInnovations(Set<ProjectInnovation> projectInnovations) {
    this.projectInnovations = projectInnovations;
  }

  public void setProjectInnovationShareds(Set<ProjectInnovationShared> projectInnovationShareds) {
    this.projectInnovationShareds = projectInnovationShareds;
  }

  public void setProjectLeverages(Set<ProjectLeverage> projectLeverages) {
    this.projectLeverages = projectLeverages;
  }

  public void setProjectLocationElementTypes(Set<ProjectLocationElementType> projectLocationElementTypes) {
    this.projectLocationElementTypes = projectLocationElementTypes;
  }


  public void setProjectLocations(Set<ProjectLocation> projectLocations) {
    this.projectLocations = projectLocations;
  }

  public void setProjectLp6Contribution(ProjectLp6Contribution projectLp6Contribution) {
    this.projectLp6Contribution = projectLp6Contribution;
  }

  public void setProjectLp6Contributions(Set<ProjectLp6Contribution> projectLp6Contributions) {
    this.projectLp6Contributions = projectLp6Contributions;
  }

  public void setProjectOtherContributions(Set<ProjectOtherContribution> projectOtherContributions) {
    this.projectOtherContributions = projectOtherContributions;
  }

  public void setProjectOtherContributionsList(List<ProjectOtherContribution> projectOtherContributionsList) {
    this.projectOtherContributionsList = projectOtherContributionsList;
  }

  public void setProjectOutcomes(Set<ProjectOutcome> projectOutcomes) {
    this.projectOutcomes = projectOutcomes;
  }

  public void setProjectOutcomesPandr(Set<ProjectOutcomePandr> projectOutcomesPandr) {
    this.projectOutcomesPandr = projectOutcomesPandr;
  }

  public void setProjectPartners(Set<ProjectPartner> projectPartners) {
    this.projectPartners = projectPartners;
  }

  public void setProjectPhases(Set<ProjectPhase> projectPhases) {
    this.projectPhases = projectPhases;
  }

  public void setProjectPolicies(Set<ProjectPolicy> projectPolicies) {
    this.projectPolicies = projectPolicies;
  }

  public void setProjectRegions(List<ProjectLocation> projectRegions) {
    this.projectRegions = projectRegions;
  }

  public void setProjectScopes(Set<ProjectScope> projectScopes) {
    this.projectScopes = projectScopes;
  }

  public void setRegionFS(List<CountryFundingSources> regionFS) {
    this.regionFS = regionFS;
  }

  public void setRegions(List<CrpProgram> regions) {
    this.regions = regions;
  }

  public void setRegionsValue(String regionsValue) {
    this.regionsValue = regionsValue;
  }

  public void setScopes(List<ProjectScope> scopes) {
    this.scopes = scopes;
  }

  public void setSectionStatuses(Set<SectionStatus> sectionStatuses) {
    this.sectionStatuses = sectionStatuses;
  }

  public void setSharedExpectedStudies(List<ProjectExpectedStudy> sharedExpectedStudies) {
    this.sharedExpectedStudies = sharedExpectedStudies;
  }

  public void setSubmissions(Set<Submission> submissions) {
    this.submissions = submissions;
  }

  public void setTotalBilateral(double totalBilateral) {
    this.totalBilateral = totalBilateral;
  }


  public void setTotalCenterFunds(double totalCenterFunds) {
    this.totalCenterFunds = totalCenterFunds;
  }


  public void setTotalW1(double totalW1) {
    this.totalW1 = totalW1;
  }


  public void setTotalW3(double totalW3) {
    this.totalW3 = totalW3;
  }

  public void setW3Budget(double w3Budget) {
    this.w3Budget = w3Budget;
  }

  @Override
  public String toString() {
    return "Project [id=" + this.getId() + ", isActive=" + this.isActive() + "]";
  }

}

