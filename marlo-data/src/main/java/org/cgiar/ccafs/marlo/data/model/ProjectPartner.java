package org.cgiar.ccafs.marlo.data.model;
// Generated Jul 29, 2016 8:50:03 AM by Hibernate Tools 4.3.1.Final


import org.cgiar.ccafs.marlo.data.IAuditLog;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import com.google.gson.annotations.Expose;

/**
 * ProjectPartner generated by hbm2java
 */
public class ProjectPartner extends MarloAuditableEntity implements java.io.Serializable, IAuditLog {


  /**
   * 
   */
  private static final long serialVersionUID = -8386210768059621143L;

  @Expose
  private Institution institution;

  @Expose
  private Project project;
  @Expose
  private String responsibilities;
  @Expose
  private Phase phase;
  @Expose
  private String subDepartment;
  @Expose

  private ProjectPartnerPartnership projectPartnerPartnership;


  private Set<ProjectPartnerContribution> projectPartnerContributions = new HashSet<ProjectPartnerContribution>(0);


  private Set<ProjectPartnerContribution> projectPartnerContributors = new HashSet<ProjectPartnerContribution>(0);

  private Set<ProjectPartnerOverall> projectPartnerOveralls = new HashSet<ProjectPartnerOverall>(0);


  private Set<ProjectPartnerPerson> projectPartnerPersons = new HashSet<ProjectPartnerPerson>(0);

  private Set<ProjectPartnerLocation> projectPartnerLocations = new HashSet<ProjectPartnerLocation>(0);

  private Set<ProjectPartnerPartnership> projectPartnerPartnerships = new HashSet<ProjectPartnerPartnership>(0);

  private List<InstitutionLocation> selectedLocations = new ArrayList<>();

  private List<ProjectPartnerPerson> partnerPersons = new ArrayList<>();

  private List<ProjectPartnerContribution> partnerContributors = new ArrayList<>();

  private List<ProjectPartnerPartnership> partnerPartnerships = new ArrayList<>();


  public ProjectPartner() {
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }
    if (obj == null) {
      return false;
    }
    if (this.getClass() != obj.getClass()) {
      return false;
    }
    ProjectPartner other = (ProjectPartner) obj;
    if (this.getId() == null) {
      if (other.getId() != null) {
        return false;
      }
    } else if (!this.getId().equals(other.getId())) {
      return false;
    }
    return true;
  }

  public String getComposedName() {
    try {

      if (this.getInstitution().getAcronym() != null) {
        if (this.getInstitution().getAcronym().length() != 0) {
          try {
            return this.getInstitution().getAcronym() + " - " + this.getInstitution().getName();// + " - " +
                                                                                                // this.getLocElement().getName();
          } catch (Exception e) {
            return this.getInstitution().getAcronym() + " - " + this.getInstitution().getName();
          }

        }
      }
      return this.getInstitution().getName();
    } catch (Exception e) {
      return "";
    }


  }

  public Institution getInstitution() {
    return this.institution;
  }

  @Override
  public String getLogDeatil() {
    StringBuilder sb = new StringBuilder();

    sb.append("Id : ").append(this.getId());


    return sb.toString();
  }

  public List<ProjectPartnerContribution> getPartnerContributors() {
    return partnerContributors;
  }

  public List<ProjectPartnerPartnership> getPartnerPartnerships() {
    return partnerPartnerships;
  }


  public List<ProjectPartnerPerson> getPartnerPersons() {
    return partnerPersons;
  }

  public String getPersonComposedName(int partnerPersonID) {
    if (partnerPersonID <= 0) {
      return "";
    }

    for (ProjectPartnerPerson person : partnerPersons) {
      if (person.getId() == partnerPersonID) {
        StringBuilder str = new StringBuilder();
        str.append(person.getUser().getLastName());
        str.append(", ");
        str.append(person.getUser().getFirstName());
        str.append(" <");
        str.append(person.getUser().getEmail());
        str.append(">, ");
        if (institution.getAcronym() != null) {
          str.append(institution.getAcronym());
          str.append(" - ");
        }
        str.append(institution.getName());
        return str.toString();
      }
    }

    return "";
  }

  public Phase getPhase() {
    return phase;
  }

  public Project getProject() {
    return project;
  }

  public Set<ProjectPartnerContribution> getProjectPartnerContributions() {
    return this.projectPartnerContributions;
  }


  public Set<ProjectPartnerContribution> getProjectPartnerContributors() {
    return this.projectPartnerContributors;
  }


  public Set<ProjectPartnerLocation> getProjectPartnerLocations() {
    return projectPartnerLocations;
  }


  public Set<ProjectPartnerOverall> getProjectPartnerOveralls() {
    return this.projectPartnerOveralls;
  }

  public ProjectPartnerPartnership getProjectPartnerPartnership() {
    return projectPartnerPartnership;
  }

  public Set<ProjectPartnerPartnership> getProjectPartnerPartnerships() {
    return projectPartnerPartnerships;
  }

  public Set<ProjectPartnerPerson> getProjectPartnerPersons() {
    return this.projectPartnerPersons;
  }

  public String getResponsibilities() {
    return responsibilities;
  }

  public List<InstitutionLocation> getSelectedLocations() {
    return selectedLocations;
  }

  public String getSubDepartment() {
    return subDepartment;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((this.getId() == null) ? 0 : this.getId().hashCode());
    return result;
  }

  /**
   * This methods validate if the current project partner has a contact person working as coordinator.
   * 
   * @return true if this project partner is coordinating the project. false otherwise.
   */
  public boolean isCoordinator() {
    try {
      for (ProjectPartnerPerson person : partnerPersons) {
        if (person.getContactType().equals("PC")) {
          return true;
        }
      }
      return false;
    } catch (Exception e) {
      return false;
    }
  }

  /**
   * This methods validate if the current project partner has a contact person working as leader.
   * 
   * @return true if this project partner is leading the project. false otherwise.
   */
  public boolean isLeader() {
    try {
      for (ProjectPartnerPerson person : partnerPersons) {
        if (person.getContactType().equals("PL")) {
          return true;
        }
      }
      return false;
    } catch (Exception e) {
      return false;
    }
  }

  public void setInstitution(Institution institution) {
    this.institution = institution;
  }

  public void setPartnerContributors(List<ProjectPartnerContribution> partnerContributors) {
    this.partnerContributors = partnerContributors;
  }

  public void setPartnerPartnerships(List<ProjectPartnerPartnership> partnerPartnerships) {
    this.partnerPartnerships = partnerPartnerships;
  }

  public void setPartnerPersons(List<ProjectPartnerPerson> partnerPersons) {
    this.partnerPersons = partnerPersons;
  }


  public void setPhase(Phase phase) {
    this.phase = phase;
  }


  public void setProject(Project project) {
    this.project = project;
  }

  public void
    setProjectPartnerContributions(Set<ProjectPartnerContribution> projectPartnerContributionsesForProjectPartnerId) {
    this.projectPartnerContributions = projectPartnerContributionsesForProjectPartnerId;
  }

  public void setProjectPartnerContributors(
    Set<ProjectPartnerContribution> projectPartnerContributionsesForProjectPartnerContributorId) {
    this.projectPartnerContributors = projectPartnerContributionsesForProjectPartnerContributorId;
  }

  public void setProjectPartnerLocations(Set<ProjectPartnerLocation> projectPartnerLocations) {
    this.projectPartnerLocations = projectPartnerLocations;
  }


  public void setProjectPartnerOveralls(Set<ProjectPartnerOverall> projectPartnerOveralls) {
    this.projectPartnerOveralls = projectPartnerOveralls;
  }

  public void setProjectPartnerPartnership(ProjectPartnerPartnership projectPartnerPartnership) {
    this.projectPartnerPartnership = projectPartnerPartnership;
  }

  public void setProjectPartnerPartnerships(Set<ProjectPartnerPartnership> projectPartnerPartnerships) {
    this.projectPartnerPartnerships = projectPartnerPartnerships;
  }

  public void setProjectPartnerPersons(Set<ProjectPartnerPerson> projectPartnerPersonses) {
    this.projectPartnerPersons = projectPartnerPersonses;
  }

  public void setResponsibilities(String responsibilities) {
    this.responsibilities = responsibilities;
  }

  public void setSelectedLocations(List<InstitutionLocation> selectedLocations) {
    this.selectedLocations = selectedLocations;
  }

  public void setSubDepartment(String subDepartment) {
    this.subDepartment = subDepartment;
  }

  @Override
  public String toString() {
    return "ProjectPartner [id=" + this.getId() + ", institution=" + institution + ", project=" + project + "]";
  }
}

